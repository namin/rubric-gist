module HttpClient {
  @ "HTTP client configuration for API calls"
  @ "Third-party integration setup"

  type: "utility"
  
  location: "src/lib/http-client.ts"
  
  interface {
    @ "HTTP client instance"
    public httpClient: {
      get: (url: string, config?: RequestConfig) -> Promise<Response>,
      post: (url: string, data?: any, config?: RequestConfig) -> Promise<Response>,
      put: (url: string, data?: any, config?: RequestConfig) -> Promise<Response>,
      delete: (url: string, config?: RequestConfig) -> Promise<Response>
    }
    
    @ "Request configuration"
    public type RequestConfig = {
      headers?: Record<string, string>,
      timeout?: number,
      signal?: AbortSignal
    }
    
    @ "Response helpers"
    public parseJsonResponse: (response: Response) -> Promise<any>
    public handleHttpError: (response: Response) -> Promise<never>
  }
  
  state {
    @ "Client configuration"
    private readonly BASE_CONFIG = {
      timeout: 10000,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    }
  }
  
  imports {
    @ "Types only"
    allow "../types" as types
    
    @ "No business logic imports"
    deny imports ["../services/*", "../stores/*", "../hooks/*", "../components/*"]
  }
  
  constraints {
    @ "External library configurations allowed"
    allow io.network.* @ "HTTP client setup"
    
    @ "No business logic"
    deny pattern.business_logic
    
    @ "Configuration only"
    require pattern.configuration_setup
    
    @ "Export client and helpers"
    require exports ["httpClient", "RequestConfig", "parseJsonResponse", "handleHttpError"]
    
    @ "Size constraints"
    warn file.lines > 100
    deny file.lines > 150
  }
}
