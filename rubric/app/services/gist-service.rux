module GistService {
  @ "Business logic for GitHub Gist operations"
  @ "Orchestrates data operations and enforces business rules"

  type: "service"
  
  location: "src/services/gist-service.ts"
  
  interface {
    @ "Public service methods"
    public listPublicGists(filters?: GistFilters) -> Promise<Gist[]>
    public getGist(id: string) -> Promise<Gist>
    public searchUserGists(username: string, filters?: GistFilters) -> Promise<Gist[]>
    
    @ "Business operations"
    public validateGistId(id: string) -> boolean
    public formatGistData(rawGist: any) -> Gist
    public extractFileContent(gist: Gist, filename: string) -> string?
  }
  
  state {
    @ "Service-level caching"
    private _cache: Map<string, Gist>
    private _cacheExpiry: Map<string, number>
    
    @ "Service configuration"
    private _config: {
      baseUrl: string,
      cacheTimeout: number
    }
  }
  
  imports {
    @ "Data layer imports"
    allow "../data/gist-data" as {gistData}
    
    @ "Types and interfaces"
    allow "../types/gist.types" as types
    
    @ "Utilities"
    allow "../utils/validation" as validators
    allow "../utils/errors" as {AppError, ErrorCode}
    
    @ "External libraries"
    allow "date-fns" as external
    
    @ "Cannot import UI or stores"
    deny imports ["../components/*", "../stores/*"]
  }
  
  constraints {
    @ "Error handling required"
    require pattern.try_catch_blocks
    require pattern.error_transformation
    
    @ "No UI concerns"
    deny pattern.jsx_elements
    deny imports ["react", "@mui/material"]
    
    @ "Business logic validation"
    require pattern.input_validation
    require pattern.business_rules
    
    @ "Logging for debugging"
    allow io.console.error
    allow io.console.warn when NODE_ENV="development"
    
    @ "Export only public interface"
    deny exports ["_*", "cache", "config"]
    
    @ "Complexity management"
    warn file.lines > 300
    deny file.lines > 500
    warn function.complexity > 10
  }
}
